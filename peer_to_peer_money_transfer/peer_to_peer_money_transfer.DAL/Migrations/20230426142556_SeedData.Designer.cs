// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using peer_to_peer_money_transfer.DAL.Context;

#nullable disable

namespace peer_to_peer_money_transfer.DAL.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230426142556_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1414a73-67cb-4880-97e2-d5506b8b1882",
                            Active = true,
                            ConcurrencyStamp = "1",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8649),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "ec1fc76c-bb87-4577-8c77-dbfde1d7c285",
                            Active = true,
                            ConcurrencyStamp = "2",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8660),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0a4c6d03-8df9-4fae-9a86-3e29a73ef89d",
                            Active = true,
                            ConcurrencyStamp = "3",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8729),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicatonRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicatonRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BVN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CAC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Lien")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecoveryMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "administrator",
                            AccessFailedCount = 0,
                            Activated = false,
                            Address = "cashmingleaddress",
                            Balance = 0m,
                            ConcurrencyStamp = "bc5b3c04-c237-45b2-af05-e374db5cbca0",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8448),
                            Deleted = false,
                            Email = "cashmingle@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "cashMingleAdministrator",
                            LastName = "cashMingleAdministrator",
                            Lien = false,
                            LockoutEnabled = false,
                            NIN = "12345678900",
                            PasswordHash = "123@Aa",
                            PhoneNumber = "+2348080000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c87b3b66-9893-4e4c-a16b-e4a9b64daa3d",
                            TwoFactorEnabled = false,
                            UserName = "superAdministrator",
                            UserTypeId = 4,
                            Verified = false
                        },
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Activated = false,
                            Address = "cashmingleaddress",
                            Balance = 0m,
                            ConcurrencyStamp = "217b1189-ac63-4eff-880c-25bcd6dbbb8f",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8564),
                            Deleted = false,
                            Email = "cashmingle1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "user1",
                            LastName = "user1",
                            Lien = false,
                            LockoutEnabled = false,
                            NIN = "12345678900",
                            PasswordHash = "123@Aa",
                            PhoneNumber = "+2348080000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81eee415-a328-4116-978f-2a663fa220e6",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            UserTypeId = 1,
                            Verified = false
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Activated = false,
                            Address = "cashmingleaddress",
                            Balance = 0m,
                            ConcurrencyStamp = "7efb4006-a5ae-4419-8227-e03bad518845",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8578),
                            Deleted = false,
                            Email = "cashmingle2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "user2",
                            LastName = "user2",
                            Lien = false,
                            LockoutEnabled = false,
                            NIN = "12345678900",
                            PasswordHash = "123@Aa",
                            PhoneNumber = "+2348080000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43882b76-bc46-4d84-b742-bf44572ad29f",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            UserTypeId = 2,
                            Verified = false
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Activated = false,
                            Address = "cashmingleaddress",
                            Balance = 0m,
                            ConcurrencyStamp = "11611487-16de-4f24-bba8-68dc7784f138",
                            CreatedAt = new DateTime(2023, 4, 26, 15, 25, 55, 837, DateTimeKind.Local).AddTicks(8610),
                            Deleted = false,
                            Email = "cashmingle3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "user3",
                            LastName = "user3",
                            Lien = false,
                            LockoutEnabled = false,
                            NIN = "12345678900",
                            PasswordHash = "123@Aa",
                            PhoneNumber = "+2348080000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d29635a8-04cd-42bd-a6da-96b1f9f1faf0",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            UserTypeId = 3,
                            Verified = false
                        });
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationRoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationUserId", "ApplicationRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.Complains", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComplainDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplainSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isrevised")
                        .HasColumnType("bit");

                    b.Property<long>("TransationId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Complains");
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.TransactionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TransactionHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationRole", "ApplicatonRole")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ApplicatonRoleId");

                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicatonRole");
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.Complains", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany("Complains")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.TransactionHistory", b =>
                {
                    b.HasOne("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", null)
                        .WithMany("TransactionHistory")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("peer_to_peer_money_transfer.DAL.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Complains");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("TransactionHistory");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
